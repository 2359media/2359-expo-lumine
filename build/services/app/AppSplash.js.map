{"version":3,"file":"AppSplash.js","sourceRoot":"","sources":["../../../src/services/app/AppSplash.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAC1D,OAAO,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAC,MAAM,cAAc,CAAC;AACnE,OAAO,EAAC,kBAAkB,EAAE,iBAAiB,EAAC,MAAM,UAAU,CAAC;AAC/D,OAAO,EAAC,aAAa,EAAC,MAAM,WAAW,CAAC;AAExC,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,EAAC,IAAI,EAAE,IAAI,EAAM;IACjD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,MAAM,MAAM,GAAG,cAAc,EAAE,CAAC;IAEhC,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,IAAI,EAAE;YACR,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACxB,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,GAAG;gBACb,eAAe,EAAE,IAAI;aACtB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;gBACZ,SAAS,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,IAAI,MAAM,EAAE;QACV,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,QAAQ,CAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC3C,oBAAC,eAAe,IACd,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,MAAM,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,EAC3C,UAAU,EAAC,OAAO;YAElB,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,aAAa;gBAC/B,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,IAAI;oBACrB,aAAa;oBACb,IAAI;oBACJ,IAAI,CACA,CACF,CACS,CACJ,CACjB,CAAC;AACJ,CAAC;AAED,MAAM,cAAc,GAAG,iBAAiB,CAAC,CAAC,EAAC,MAAM,EAAC,EAAE,EAAE,CAAC,CAAC;IACtD,SAAS,EAAE;QACT,IAAI,EAAE,CAAC;KACR;IACD,MAAM,EAAE,CAAC,QAAwB,EAAE,EAAE,CAAC,CAAC;QACrC,GAAG,kBAAkB;QACrB,MAAM,EAAE,GAAG;QACX,OAAO,EAAE,QAAQ;KAClB,CAAC;IACF,KAAK,EAAE;QACL,IAAI,EAAE,CAAC;QACP,eAAe,EAAE,MAAM,CAAC,UAAU;QAClC,UAAU,EAAE,QAAQ;QACpB,cAAc,EAAE,UAAU;KAC3B;IACD,aAAa,EAAE;QACb,eAAe,EAAE,OAAO;QACxB,OAAO,EAAE,CAAC;QACV,YAAY,EAAE,CAAC;QACf,SAAS,EAAE,QAAQ;QACnB,YAAY,EAAE,EAAE;QAChB,gBAAgB;KACjB;IACD,IAAI,EAAE;QACJ,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,MAAM;QAClB,KAAK,EAAE,OAAO;KACf;CACF,CAAC,CAAC,CAAC","sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\nimport {Text, ImageBackground, Animated, View} from 'react-native';\nimport {absoluteFillObject, createThemeStyles} from '../style';\nimport {versionString} from './version';\n\nexport default function AppSplash({text, done}: any) {\n  const opacityA = useMemo(() => new Animated.Value(1), []);\n  const [hidden, setHidden] = useState(false);\n  const styles = useThemeStyles();\n\n  useEffect(() => {\n    if (done) {\n      Animated.timing(opacityA, {\n        toValue: 0,\n        delay: 200,\n        duration: 200,\n        useNativeDriver: true,\n      }).start(() => {\n        setHidden(true);\n      });\n    }\n  }, [done]);\n\n  if (hidden) {\n    return null;\n  }\n\n  return (\n    <Animated.View style={styles.splash(opacityA)}>\n      <ImageBackground\n        style={styles.image}\n        source={require('../../bridge').splashImage}\n        resizeMode=\"cover\"\n      >\n        <View style={styles.textContainer}>\n          <Text style={styles.text}>\n            {versionString}\n            {'\\n'}\n            {text}\n          </Text>\n        </View>\n      </ImageBackground>\n    </Animated.View>\n  );\n}\n\nconst useThemeStyles = createThemeStyles(({colors}) => ({\n  container: {\n    flex: 1,\n  },\n  splash: (opacityA: Animated.Value) => ({\n    ...absoluteFillObject,\n    zIndex: 100,\n    opacity: opacityA,\n  }),\n  image: {\n    flex: 1,\n    backgroundColor: colors.background,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  textContainer: {\n    backgroundColor: 'black',\n    padding: 8,\n    borderRadius: 8,\n    alignSelf: 'center',\n    marginBottom: 50,\n    // opacity: 0.5,\n  },\n  text: {\n    textAlign: 'center',\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n}));\n"]}