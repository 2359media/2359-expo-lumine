{"version":3,"file":"reducer.js","sourceRoot":"","sources":["../../../src/services/store/reducer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAC7C,OAAO,OAAO,MAAM,WAAW,CAAC;AAEhC,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB,MAAM,EAAE,QAAQ;IAChB,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,SAAS,SAAS,CAAC,KAAU,EAAE,QAAa;IAC1C,IACE,KAAK;QACL,QAAQ;QACR,OAAO,QAAQ,IAAI,QAAQ;QAC3B,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EACxB;QACA,MAAM,WAAW,GAAG,EAAC,GAAG,KAAK,EAAC,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAChC,WAAW,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,aAAa,CAAmB,YAAe;IAC7D,MAAM,eAAe,GAAQ,EAAE,CAAC;IAEhC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtC,eAAe,CAAC,GAAG,CAAC,GAAG,cAAc,CACnC,EAAC,GAAG,EAAE,OAAO,EAAC,EACd,CAAC,KAAU,EAAE,MAAW,EAAE,EAAE;YAC1B,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACzC,IAAI,MAAM,CAAC,IAAI,IAAI,WAAW,CAAC,MAAM,EAAE;oBACrC,OAAO,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC9C;qBAAM,IAAI,MAAM,CAAC,IAAI,IAAI,WAAW,CAAC,KAAK,EAAE;oBAC3C,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;iBAC5B;aACF;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,OAAO,CAAC,KAAK,GAAG,YAAY,EAAE,MAAW;QACvD,MAAM,QAAQ,GAAQ,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC/B,QAAQ,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,CAClC,KAAK,CAAC,GAAyB,CAAC,EAChC,MAAM,CACP,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import {persistReducer} from 'redux-persist';\nimport storage from './storage';\n\nexport const actionTypes = {\n  update: 'update',\n  reset: 'reset',\n};\n\nfunction deepMerge(state: any, newState: any): any {\n  if (\n    state &&\n    newState &&\n    typeof newState == 'object' &&\n    !Array.isArray(newState)\n  ) {\n    const mergedState = {...state};\n    Object.keys(newState).forEach(k => {\n      mergedState[k] = deepMerge(state[k], newState[k]);\n    });\n    return mergedState;\n  }\n  return newState;\n}\n\nexport function createReducer<T extends Object>(initialState: T) {\n  const persistReducers: any = {};\n\n  Object.keys(initialState).forEach(key => {\n    persistReducers[key] = persistReducer(\n      {key, storage},\n      (state: any, action: any) => {\n        if (action.payload && action.payload[key]) {\n          if (action.type == actionTypes.update) {\n            return deepMerge(state, action.payload[key]);\n          } else if (action.type == actionTypes.reset) {\n            return action.payload[key];\n          }\n        }\n        return state;\n      }\n    );\n  });\n\n  return function reducer(state = initialState, action: any): T {\n    const newState: any = {};\n    Object.keys(state).forEach(key => {\n      newState[key] = persistReducers[key](\n        state[key as keyof typeof state],\n        action\n      );\n    });\n    return newState;\n  };\n}\n"]}