{"version":3,"file":"reducer.js","sourceRoot":"","sources":["../../../src/services/store/reducer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAC7C,OAAO,OAAO,MAAM,WAAW,CAAC;AAChC,OAAO,EAAQ,YAAY,EAAC,MAAM,SAAS,CAAC;AAE5C,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB,MAAM,EAAE,QAAQ;IAChB,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,SAAS,SAAS,CAAC,KAAU,EAAE,QAAa;IAC1C,IACE,KAAK;QACL,QAAQ;QACR,OAAO,QAAQ,IAAI,QAAQ;QAC3B,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EACxB;QACA,MAAM,WAAW,GAAG,EAAC,GAAG,KAAK,EAAC,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAChC,WAAW,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,eAAe,GAAQ,EAAE,CAAC;AAEhC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACtC,eAAe,CAAC,GAAG,CAAC,GAAG,cAAc,CACnC,EAAC,GAAG,EAAE,OAAO,EAAC,EACd,CAAC,KAAU,EAAE,MAAW,EAAE,EAAE;QAC1B,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACzC,IAAI,MAAM,CAAC,IAAI,IAAI,WAAW,CAAC,MAAM,EAAE;gBACrC,OAAO,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9C;iBAAM,IAAI,MAAM,CAAC,IAAI,IAAI,WAAW,CAAC,KAAK,EAAE;gBAC3C,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC5B;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,OAAO,WAAW,QAAe,YAAY,EAAE,MAAW;IAC/D,MAAM,QAAQ,GAAQ,EAAE,CAAC;IACzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC/B,QAAQ,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAkB,CAAC,EAAE,MAAM,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import {persistReducer} from 'redux-persist';\nimport storage from './storage';\nimport {State, initialState} from './state';\n\nexport const actionTypes = {\n  update: 'update',\n  reset: 'reset',\n};\n\nfunction deepMerge(state: any, newState: any): any {\n  if (\n    state &&\n    newState &&\n    typeof newState == 'object' &&\n    !Array.isArray(newState)\n  ) {\n    const mergedState = {...state};\n    Object.keys(newState).forEach(k => {\n      mergedState[k] = deepMerge(state[k], newState[k]);\n    });\n    return mergedState;\n  }\n  return newState;\n}\n\nconst persistReducers: any = {};\n\nObject.keys(initialState).forEach(key => {\n  persistReducers[key] = persistReducer(\n    {key, storage},\n    (state: any, action: any) => {\n      if (action.payload && action.payload[key]) {\n        if (action.type == actionTypes.update) {\n          return deepMerge(state, action.payload[key]);\n        } else if (action.type == actionTypes.reset) {\n          return action.payload[key];\n        }\n      }\n      return state;\n    }\n  );\n});\n\nexport default function (state: State = initialState, action: any): State {\n  const newState: any = {};\n  Object.keys(state).forEach(key => {\n    newState[key] = persistReducers[key](state[key as keyof State], action);\n  });\n  return newState;\n}\n"]}