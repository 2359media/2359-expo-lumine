{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../src/services/store/storage.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,2CAA2C,CAAC;AAChE,OAAO,KAAK,aAAa,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAC,MAAM,EAAC,MAAM,QAAQ,CAAC;AAE9B,MAAM,aAAa,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC;AAE9C,SAAS,OAAO,CAAC,UAAkB,EAAE,KAAU;IAC7C,MAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC/C,IAAI,aAAa,EAAE,EAAE;QACnB,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;KACzB;IACD,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3B,CAAC,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC;QACxC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAClC,CAAC;AAED,SAAS,OAAO,CAAC,UAAkB;IACjC,MAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC/C,IAAI,aAAa,EAAE,EAAE;QACnB,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;KACzB;IACD,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3B,CAAC,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC;QACjC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AAED,SAAS,UAAU,CAAC,UAAkB;IACpC,MAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC/C,IAAI,aAAa,EAAE,EAAE;QACnB,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;KACzB;IACD,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3B,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC;QACpC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC;AAED,eAAe,EAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC","sourcesContent":["import Storage from '@react-native-async-storage/async-storage';\nimport * as SecureStorage from 'expo-secure-store';\nimport {getEnv} from '../env';\n\nconst isMockStorage = () => getEnv() == 'dev';\n\nfunction setItem(persistKey: string, value: any) {\n  const key = persistKey.replace('persist:', '');\n  if (isMockStorage()) {\n    return Promise.reject();\n  }\n  return key.endsWith('secure')\n    ? SecureStorage.setItemAsync(key, value)\n    : Storage.setItem(key, value);\n}\n\nfunction getItem(persistKey: string) {\n  const key = persistKey.replace('persist:', '');\n  if (isMockStorage()) {\n    return Promise.reject();\n  }\n  return key.endsWith('secure')\n    ? SecureStorage.getItemAsync(key)\n    : Storage.getItem(key);\n}\n\nfunction removeItem(persistKey: string) {\n  const key = persistKey.replace('persist:', '');\n  if (isMockStorage()) {\n    return Promise.reject();\n  }\n  return key.endsWith('secure')\n    ? SecureStorage.deleteItemAsync(key)\n    : Storage.removeItem(key);\n}\n\nexport default {setItem, getItem, removeItem};\n"]}